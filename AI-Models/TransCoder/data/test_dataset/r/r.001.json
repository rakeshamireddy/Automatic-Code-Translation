{ "repo_name": "hadley/readxl", "ref": "refs/heads/master", "path": "R/excel-sheets.R", "content": "#' List all sheets in an excel spreadsheet.\n#'\n#' @inheritParams read_excel\n#' @export\n#' @examples\n#' excel_sheets(system.file(\"extdata/datasets.xlsx\", package = \"readxl\"))\n#' excel_sheets(system.file(\"extdata/datasets.xls\", package = \"readxl\"))\n#'\n#' # To load all sheets in a workbook, use lapply\n#' path <- system.file(\"extdata/datasets.xls\", package = \"readxl\")\n#' lapply(excel_sheets(path), read_excel, path = path)\nexcel_sheets <- function(path) {\n  path <- check_file(path)\n  ext <- tolower(tools::file_ext(path))\n\n  switch(excel_format(path),\n    xls =  xls_sheets(path),\n    xlsx = xlsx_sheets(path)\n  )\n}\n" }
{ "repo_name": "eddelbuettel/rcppredis", "ref": "refs/heads/master", "path": "inst/tests/runit.serverIssues.R", "content": "test_01_setup <- function() {\n    suppressMessages(library(RcppRedis))\n    # we start the Redis server for this test as a slave so we don't clobber the main running version of redis for the rest of the tests\n    writeLines(\"requirepass badPassword\",\"/tmp/redis.conf\")\n    system(\"redis-server /tmp/redis.conf --port 7777 --slaveof localhost 6379\", wait=FALSE)\n    # Wait for server to come up\n    Sys.sleep(5)\n}\n\ntest_02_testUnauth <- function () {\n  redis <<- new(RcppRedis::Redis, \"localhost\", 7777, auth = \"\", 10)\n  # we expect an exception because we haven't send the password\n  checkException(redis$ping())\n}\n\ntest_03_testAuth <- function () {\n  redis <<- new(RcppRedis::Redis, \"localhost\", 7777, auth = \"badPassword\", 10)\n  checkEquals(redis$ping(), \"PONG\")\n}\n\ntest_04_killServer <- function() {\n    # confirm server is up\n    checkEquals(redis$ping(),\"PONG\")\n    # kill server\n    checkException(redis$exec(\"SHUTDOWN\"))\n}\n\ntest_05_cleanup <- function() {\n    NULL\n}\n" }
{ "repo_name": "eddelbuettel/rcppredis", "ref": "refs/heads/master", "path": "demo/spDemo.R", "content": "\n\nlibrary(rredis)\nsuppressMessages(library(RcppRedis))\nsuppressMessages(library(xts))\nlibrary(rbenchmark)\n\nredisConnect()                          # default localhost\nredis <- new(Redis)\n\nif (!redisExists(\"sp500\")) {\n    suppressMessages(library(quantmod))\n    options(\"getSymbols.warning4.0\"=FALSE)   ## suppress some line noise\n    sp <- getSymbols(\"^GSPC\", auto.assign=FALSE, from=\"1950-01-01\", to=Sys.Date())\n    redisSet(\"sp500\", sp)\n    cat(\"Downloaded SP500 and stored in redis\\n\")\n} else { \n    cat(\"Retrieving SP500 from redis\\n\")\n    sp <- redisGet(\"sp500\")\n}\n#print(summary(sp))\n\nrInsert <- function(x) {\n    n <- nrow(x)\n    key <- \"sp500_R\"\n    if (redisExists(key)) redisDelete(key)\n    M <- cbind(as.numeric(index(x)), coredata(x))\n    for (i in 1:n) {\n        redisRPush(key, M[i,,drop=TRUE])\n    }\n    invisible(NULL)\n}\n\n## This is atrociously slow:\n##\n## R> system.time(rInsert(sp))\n##    user  system elapsed \n##  16.392   0.292 645.643 \n## R> \n\nsystem.time(m1 <- do.call(rbind, redisLRange(\"sp500_R\", 0, -1)))\nsystem.time(m2 <- do.call(rbind, redis$lrange(\"sp500_R\", 0, -1)))\nidentical(m1,m2)\nsystem.time(m3 <- redis$listToMatrix(redis$lrange(\"sp500_R\", 0, -1)))\nm4 <- m1\ndimnames(m4) <- list()\nidentical(m4,m3)\n\n## approx factor 20\nres <- benchmark(do.call(rbind, redisLRange(\"sp500_R\", 0, -1)),\n                 do.call(rbind, redis$lrange(\"sp500_R\", 0, -1)),\n                 redis$listToMatrix(redis$lrange(\"sp500_R\", 0, -1)),\n                 order=\"relative\", replications=25)[,1:4]\nprint(res)\n\n\ncInsert <- function(x) {\n    n <- nrow(x)\n    key <- \"sp500_C\"\n    if (redisExists(key)) redisDelete(key)\n    M <- cbind(as.numeric(index(x)), coredata(x))\n    for (i in 1:n) {\n        redis$listRPush(key, M[i,])\n    }\n    invisible(NULL)\n}\n\n\n## approx factor 20\nres <- benchmark(do.call(rbind, redisLRange(\"sp500_R\", 0, -1)),\n                 do.call(rbind, redis$lrange(\"sp500_R\", 0, -1)),\n                 redis$listToMatrix(redis$lrange(\"sp500_R\", 0, -1)),\n                 redis$listToMatrix(redis$listRange(\"sp500_C\", 0, -1)),\n                 order=\"relative\", replications=25)[,1:4]\nprint(res)\n\n\n## R> print(res)\n##                                                    test replications elapsed relative\n## 4 redis$listToMatrix(redis$listRange(\"sp500_C\", 0, -1))           25   0.296    1.000\n## 3    redis$listToMatrix(redis$lrange(\"sp500_R\", 0, -1))           25   2.300    7.770\n## 2        do.call(rbind, redis$lrange(\"sp500_R\", 0, -1))           25   2.629    8.882\n## 1         do.call(rbind, redisLRange(\"sp500_R\", 0, -1))           25  48.028  162.257\n## R> \n\n## redo after Bryan's socket/nagle update to rredis:\n##                                                    test replications elapsed relative\n## 4 redis$listToMatrix(redis$listRange(\"sp500_C\", 0, -1))           25   0.407    1.000\n## 3    redis$listToMatrix(redis$lrange(\"sp500_R\", 0, -1))           25   2.112    5.189\n## 2        do.call(rbind, redis$lrange(\"sp500_R\", 0, -1))           25   2.458    6.039\n## 1         do.call(rbind, redisLRange(\"sp500_R\", 0, -1))           25  48.367  118.838\n## edd@max:~/git/rhiredis/demo$ \n" }
{ "repo_name": "NCBI-Hackathons/SRA2R", "ref": "refs/heads/master", "path": "tests/runTests.R", "content": "BiocGenerics:::testPackage(\"SRA2R\")\n" }
{ "repo_name": "NCBI-Hackathons/SRA2R", "ref": "refs/heads/master", "path": "tests/testthat/test_getReads.R", "content": "library(SRA2R)\ncontext(\"getReads\")\n\ntest_that(\"getReads returns reads from a run\", {\n  expect_equal(getFastqCount('SRR000123'),4583)\n  expect_equal(getFastqCount('SRR1607152'),78377869)\n})\n" }
