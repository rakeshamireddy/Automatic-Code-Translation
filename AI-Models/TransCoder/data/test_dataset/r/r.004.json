{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Decimal-to-binary.R","content":"# Program to convert decimal number into binary number using recursive function\nconvert_to_binary <- function(n) {\n  if(n > 1) {\n    convert_to_binary(as.integer(n/2))\n  }\n  cat(n %% 2)\n}\n\nconvert_to_binary(52)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Factorial.R","content":"# take input from the user\nfactorial <- function(n) {\nfactorial = 1\n# check is the number is negative, positive or zero\nif(num < 0) {\n  print('Sorry factorial does not exist for negative numbers')\n} else if(num == 0) {\n  print('The factorial of 0 is 1')\n} else {\n  for(i in 1:num) {\n    factorial = factorial * i\n  }\n  print(paste('The factorial of', num ,'is',factorial))\n}\n}\n\nfactorial(4)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/First-10-Fibonacci.R","content":"fibonacci <- function(n) {\nFibonacci <- numeric(n)\nFibonacci[1] <- Fibonacci[2] <- 1\nfor (i in 3:10) Fibonacci[i] <- Fibonacci[i - 2] + Fibonacci[i - 1]\nprint('First 10 Fibonacci numbers:'')\nprint(Fibonacci)\n}\n\nfibonacci(10)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Max-Min-of-Vector.R","content":"max_min_vector <- function() {\nnums = c(10, 20, 30, 40, 50, 60)\nprint('Original vector:')\nprint(nums)   \nprint(paste('Maximum value of the said vector:',max(nums)))\nprint(paste('Minimum value of the said vector:',min(nums)))\n}\n\nmax_min_vector()"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Odd-or-Even.R","content":"# Program to check if the input number is odd or even.\n# A number is even if division by 2 give a remainder of 0.\n# If remainder is 1, it is odd.\nodd_or_even <- function(n){\nnum = n\nif((num %% 2) == 0) {\n  print(paste(num,'is Even'))\n} else {\n  print(paste(num,'is Odd'))\n}\n}\n\nodd_or_even(4)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Prime-Numbers.R","content":"prime_numbers <- function(n) {\n  if (n >= 2) {\n    x = seq(2, n)\n    prime_nums = c()\n    for (i in seq(2, n)) {\n      if (any(x == i)) {\n        prime_nums = c(prime_nums, i)\n        x = c(x[(x %% i) != 0], i)\n      }\n    }\n    return(prime_nums)\n  }\n  else \n  {\n    stop('Input number should be at least 2.'')\n  }\n} \nprime_numbers(12)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/Read-csv-file.R","content":"read_csv_file <- function() {\nmovie_data = read.csv(file=movies.csv, header=TRUE, sep=',')\nprint('Content of the .csv file:'')\nprint(movie_data)\n}\n\nread_csv_file()"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/add1.r","content":"add1 <- function(n) {\n   print( n+1)\n}\n\nadd1(90)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/add2numbers.r","content":"add2nums <- function(num1, num2) {\n   print( num1+num2)\n}\n\nadd2nums(34, 6)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/areaofsquare.r","content":"areaSquare <- function(num) {\n   msg1 <- 'Invalid measurement'\n   msg2 <- 'Area of the Square is: '\n   if  (num <= 0){\n        print(msg1)\n   }else {\n       print (msg2)\n       print(num*num)\n   }\n  \n}\n\nareaSquare(6)"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/divisibleby10.r","content":"divisibleby10 <- function(num) {\nif(num %% 10 == 0){\n    print('True')\n}else{\n    print('False')\n}\n\n}\n\ndivisibleby10(60)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/integertype.r","content":"integerType <- function(num){\nif(num > 0) {\nprint('Positive number')\n} else {\nif(num == 0) {\nprint('Zero')\n} else {\nprint('Negative number')\n}\n}\n}\n\nintegerType(-90)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/lengthoflist.r","content":"\nlengthofVector <- function(vector){\ncount <- 0\nfor (i in vector){\n    count <- count + 1\n}\nprint(count)\n}\n\narray <- c(3,4,5,1,6)\nlengthofVector(array)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/palindrome.r","content":"\npalindrome <- function(n){\nrev = 0\n    num = n\n\n    while (n > 0) {\n      r = n %% 10\n      rev = rev * 10 + r\n      n = n %/% 10\n    }\n\n    if (rev == num)\n    {\n      print(paste('Number is palindrome :', rev))\n    }\n    else{\n      print(paste('Number is not palindrome :', rev))\n    }\n}\npalindrome(121)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/sort.r","content":"integerType <- function(num){\nif(num > 0) {\nsortvector <- function(vector){\nprint(sort(vector))\n}\n\narray <- c(23,12,11,34,21)\nsortvector(array)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/spmv.r","content":"\nsum <- function(vector){\nresult <- 0\nfor(i in vector){\n    result = result + i\n}\nprint(result)\n}\n\nproduct <- function(vector){\n    result <- 1\n    for(i in vector){\n        result = result*i\n    }\n    print(result)\n}\n\narray <- c(1,2,3,4)\nsum(array)\nproduct(array)\nmean(array, na.rm=TRUE)\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/upperlower.r","content":"\nupperCase <- function(word){\nresult <- toupper(word)\nprint(result)\n}\n\nlowerCase <- function(word){\nresult <- tolower(word)\nprint(result)\n}\n\nupperCase('Function')\nlowerCase('FUNCTION')\n"}
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/armstrong.r","content":"\n# take input from the user\narmstrong <- function(){\nnum = as.integer(readline(prompt='Enter a number: '))\n# initialize sum\nsum = 0\n# find the sum of the cube of each digit\ntemp = num\nwhile(temp > 0) {\ndigit = temp %% 10\nsum = sum + (digit ^ 3)\ntemp = floor(temp / 10)\n}\n# display the result\nif(num == sum) {\nprint(paste(num, 'is an Armstrong number'))\n} else {\nprint(paste(num, 'is not an Armstrong number'))\n}\n}\n" }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/divisibleby10.r","content":"\ndivisibleby10 <- function(num) {\nif(num %% 10 == 0){\n    print('True')\n}else{\n    print('False')\n}\n\n}\n\ndivisibleby10(60)\n" }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/factors.r","content":"\n#R program to print factors\nfactors <- function()\nn=14\nfor(i in 1:n)\n{\nif((n%%i)==0)\n{\n  print(i)\n}\n}\n}\n" }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/greatest3.r","content":"\ngreatest3 <- function(){\n    x <- 71\n    y <- 87\n    z <- 24\n\n    if (x > y && x > z) {\n      print(paste('Greatest is :', x))\n    } else if (y > z) {\n      print(paste('Greatest is :', y))\n    } else{\n      print(paste('Greatest is :', z))\n    }\n\n}\n"        }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/hcf.r","content":"\n# Program to find the H.C.F of two input number\n# define a function\nhcf <- function(x, y) {\n# choose the smaller number\nif(x > y) {\nsmaller = y\n} else {\nsmaller = x\n}\nfor(i in 1:smaller) {\nif((x %% i == 0) && (y %% i == 0)) {\nhcf = i\n}\n}\nreturn(hcf)\n}\n# take input from the user\nnum1 = 12\nnum2 = 36\nprint(paste('The H.C.F. of', num1,'and', num2,'is', hcf(num1, num2)))\n"        }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/lcm.r","content":"\n# Program to find the L.C.M. of two input number\nlcm <- function(x, y) {\n# choose the greater number\nif(x > y) {\ngreater = x\n} else {\ngreater = y\n}\nwhile(TRUE) {\nif((greater %% x == 0) && (greater %% y == 0)) {\nlcm = greater\nbreak\n}\ngreater = greater + 1\n}\nreturn(lcm)\n}\n# take input from the user\nnum1 = 48\nnum2 = 72\nprint(paste('The L.C.M. of', num1,'and', num2,'is', lcm(num1, num2)))\n"        }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/matrixmul.r","content": "\n#creating matrix\nmatrixmul <- function(){\nm <- matrix(1:8, nrow=2) \nn <- matrix(8:15, nrow=2)   \n\n#Multiplying matrices \nprint(m*n) \n}\n"       }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/multiples.r","content": "\n# R Program to find the multiplicationtable (from 1 to 10)\n# take input from the user\nmultiples <- function(){\nnum = 12\n# use for loop to iterate 10 times\nfor(i in 1:10) {\nprint(paste(num,'x', i, '=', num*i))\n}\n}\n"       }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/perfect.r","content": "\nperfect <- function(){\n    n <- as.integer(readline(prompt = 'Enter a number :'))\n    i = 1\n    s = 0\n\n    while (i < n) {\n      if (n %% i == 0) {\n        s = s + i\n      }\n      i = i + 1\n    }\n\n    if (s == n) {\n      print(paste('The number is perfect :', n))\n    } else{\n      print(paste('The number is not perfect :', n))\n    }\n}\n"       }
{ "repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/R/triangle.r","content": "\n#RProgram to find the area of triangle\ntriangle <- function(){\na = 5\nb = 6\nc = 7\n\n# calculate the semi-perimeter\ns = (a + b + c) / 2\n\n# calculate the area\narea = (s*(s-a)*(s-b)*(s-c)) ** 0.5\nprint(area)\n}\n" }
                  