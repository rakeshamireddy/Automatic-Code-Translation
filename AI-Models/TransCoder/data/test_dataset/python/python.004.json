{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Decimal-to-binary.py","content":"def convert_to_binary(n): \n\n      if(n > 1):\n        convert_to_binary(n//2)\n  \n      print(n % 2, end = '')\n\nconvert_to_binary(52)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Factorial.py","content":"def factorial(n):\n    factorial = 1\n    # check is the number is negative, positive or zero\n    if(n < 0):\n        print('Sorry, factorial does not exist for negative numbers')\n    elif(n == 0):\n        print('The factorial of 0 is 1')\n    else:\n        for i in range(1,n):\n            factorial = factorial * i\n        print('The factorial of {} is {}'.format(n,factorial))\n\nfactorial(4)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Fibonacci.py","content":"def fibonacci(n): \n    \n    fibonacci_seq = [None for i in range(n)]\n    fibonacci_seq[0] = fibonacci_seq[1] = 1\n    for i in range(2,n):\n        \n           fibonacci_seq[i] = fibonacci_seq[i - 2] + fibonacci_seq[i - 1]\n    print('First {} Fibonacci numbers:'.format(n))\n    print(fibonacci_seq)\n\n\nfibonacci(10)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Max-Min-of-Vector.py","content":"\ndef max_min_vector(n):\n\n    print('Original vector:')\n    print(n)   \n    print('Maximum value of the said vector:',max(n))\n    print('Minimum value of the said vector:',min(n))\n\n\nmax_min_vector([10, 20, 30, 40, 50, 60])\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Odd-or-Even.py","content":"\ndef odd_or_even(n):\n    num = n\n    \n    if((num % 2) == 0):\n        print('{} is Even'.format(num))\n    else:\n        print('{} is Odd'.format(num))\n\n\nodd_or_even(4)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Prime-Numbers.py","content":"\ndef prime_numbers(n):\n    \n     prime_nums = [] \n     if (n >= 2):\n        \n        for i in range(2,n):\n             for j in range(2,i):\n                  \n                  if i%j == 0:\n                      break\n             else:\n                 prime_nums.append(i)\n                \n                \n\n        return(prime_nums)\n     else: \n           print('Input number should be at least 2.')\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/Read-csv-file.py.","content":"\nimport pandas as pd\n\ndef read_csv_file():\n    \n    movie_data = pd.read_csv('movies.csv')\n    print('Content of the .csv file:')\n    print(movie_data)\n\n\nread_csv_file()\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/SumMeanProduct.py","content":"\nimport numpy as np\ndef sum(nums):\n    sum = 0\n    for x in nums:\n        sum = sum + x\n    print(sum)\n\ndef avg(nums):\n   print(np.mean(nums))\n\ndef product(nums):\n    print(np.prod(nums))\n\nlist1 = [3,4,5]\n\nsum(list1)\navg(list1)\nproduct(list1)"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/add1.py","content":"\ndef add1(num):\n    print(num + 1)\n    \nadd1(2)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/add2nums.py","content":"\ndef add2nums(a, b):\n    print (a+b)\n\nadd2nums(2, 3)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/areaSquare.py","content":"\ndef areaSquare(side):\n    if(side <= 0 ):\n        print 'Invalid measurement'\n    else:\n        print 'Area of the square is : ', side*side\n\nareaSquare(4)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/armstrong.py","content":"\nnum = int(input('Enter a number: '))\n\nsum = 0\n\ntemp = num\nwhile temp > 0:\n   digit = temp % 10\n   sum += digit ** 3\n   temp //= 10\n\nif num == sum:\n   print(num,'is an Armstrong number')\nelse:\n   print(num,'is not an Armstrong number')\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/describe.py","content":"\nimport pandas as pd\ndf = pd.read_csv('nba_2013.csv')\ndf.describe()\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/divisibleby10.py","content":"\ndef divisibleby10(n):\n    if(n%10 == 0):\n        print('True')\n    else:\n        print('False')\n\n\ndivisibleby10(8)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/factors.py","content":"\ndef print_factors(x):\n   print('The factors of',x,'are:')\n   for i in range(1, x + 1):\n       if x % i == 0:\n           print(i)\n\nnum = 320\n\nprint_factors(num)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/integerType.py","content":"\ndef integerType(num):\n    if (num > 0):\n        print('Number is Postive integer')\n    if(num < 0):\n        print('Number is Negative integer')\n    if(num == 0):\n        print('Number is Zero')\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/lcm.py","content":"\ndef compute_lcm(x, y):\n\n   # choose the greater number\n   if x > y:\n       greater = x\n   else:\n       greater = y\n\n   while(True):\n       if((greater % x == 0) and (greater % y == 0)):\n           lcm = greater\n           break\n       greater += 1\n\n   return lcm\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/lengthOfVector.py","content":"\ndef lengthOfVector(nums):\n    count = 0\n    for x in nums:\n        count = count+1\n    \n    print(count)\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/palindrome.py","content":"\ndef palindrome(num):\n    temp = num\n    rev = 0\n    while(num > 0):\n        dig = num % 10\n        rev = rev * 10 + dig\n        num = num // 10\n    if(temp == rev):\n        print('Number is palindrome')\n    else: \n        print('Number is not palidrome')\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/perfect.py","content":"\ndef perfect_number(n):\n    sum = 0\n    for x in range(1, n):\n        if n % x == 0:\n            sum += x\n    return sum == n\n"}
{"repo_name":"rakeshamireddy/Automatic-Code-Translation","ref":"refs/heads/master","path":"data/test_dataset/Python/sortvector.py","content":"\ndef sortVector(nums):\n    nums.sort()\n    print(nums)\n"}
