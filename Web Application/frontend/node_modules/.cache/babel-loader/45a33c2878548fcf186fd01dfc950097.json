{"ast":null,"code":"import axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL } from './types'; //Load User \n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/harika/Downloads/Github/Automatic-Code-Translation/Web Application/frontend/src/actions/auth.js"],"names":["axios","setAuthToken","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport setAuthToken from '../utils/setAuthToken'\nimport {setAlert} from './alert'\nimport {REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL} from './types'\n\n//Load User \nexport const loadUser = () => async dispatch => {\n  if(localStorage.token){\n    setAuthToken(localStorage.token);\n  }\n\n  try{\n    const res = await axios.get('/api/auth');\n    dispatch ({\n      type: USER_LOADED,\n      payload: res.data\n    })\n\n  }catch(err){\n    dispatch ({\n      type: AUTH_ERROR\n    })\n\n  }\n}\n//Register User\nexport const register = ({name, email, password}) => async dispatch =>{\n  const config = {\n    headers: {\n      'Content-Type' : 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({name, email, password});\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n\n  }catch(err){\n    const errors = err.response.data.errors;\n    if (errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n    dispatch ({\n      type: REGISTER_FAIL\n    })\n\n  }\n\n}\n\n//Login User\nexport const login = (email, password) => async dispatch =>{\n  const config = {\n    headers: {\n      'Content-Type' : 'application/json'\n    }\n  }\n\n  const body = JSON.stringify({email, password});\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n\n  }catch(err){\n    const errors = err.response.data.errors;\n    if (errors){\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n    }\n    dispatch ({\n      type: LOGIN_FAIL\n    })\n\n  }\n\n}"]},"metadata":{},"sourceType":"module"}