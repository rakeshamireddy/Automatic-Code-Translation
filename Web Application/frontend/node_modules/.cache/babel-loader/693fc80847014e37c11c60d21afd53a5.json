{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { UPDATE_USER, UPDATE_USER_ERROR } from './types'; // add translations\n\nexport const addTranslation = formData => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.put('/api/translation', formData, config);\n    dispatch({\n      type: UPDATE_USER,\n      payload: res.data\n    }); // dispatch(setAlert(edit ? 'Event Updated' : 'Event Created', 'success'));\n\n    dispatch(setAlert('Added source and target languages', 'success')); // if (!edit) {\n    //     history.push('/restdashboard');\n    // }\n    // history.push('/viewmenu');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: UPDATE_USER_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/harika/Downloads/Github/Automatic-Code-Translation/Web Application/frontend/src/actions/translation.js"],"names":["axios","setAlert","UPDATE_USER","UPDATE_USER_ERROR","addTranslation","formData","dispatch","config","headers","res","put","type","payload","data","err","errors","response","forEach","error","msg","statusText","status"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,WADF,EAEEC,iBAFF,QAGO,SAHP,C,CAKA;;AACA,OAAO,MAAMC,cAAc,GAAIC,QAAD,IAAc,OAC1CC,QAD0C,KAEvC;AACH,MAAI;AACA,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AADE,KAAf;AAGA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CACd,kBADc,EAEdL,QAFc,EAGdE,MAHc,CAAlB;AAKAD,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAET,WADD;AAELU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR,CATA,CAaA;;AACAP,IAAAA,QAAQ,CAACL,QAAQ,CAAC,mCAAD,EAAsC,SAAtC,CAAT,CAAR,CAdA,CAeA;AACA;AACA;AACA;AACH,GAnBD,CAmBE,OAAOa,GAAP,EAAY;AACV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWZ,QAAQ,CAACL,QAAQ,CAACiB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACH;;AACDb,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAER,iBADD;AAELS,MAAAA,OAAO,EAAE;AAAEO,QAAAA,GAAG,EAAEL,GAAG,CAACE,QAAJ,CAAaI,UAApB;AAAgCC,QAAAA,MAAM,EAAEP,GAAG,CAACE,QAAJ,CAAaK;AAArD;AAFJ,KAAD,CAAR;AAIH;AACF,CAhCM","sourcesContent":["\nimport axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  UPDATE_USER,\n  UPDATE_USER_ERROR,\n} from './types';\n\n// add translations\nexport const addTranslation = (formData) => async(\n  dispatch\n) => {\n  try {\n      const config = {\n          headers: { 'Content-Type': 'application/json' },\n      };\n      const res = await axios.put(\n          '/api/translation',\n          formData,\n          config\n      );\n      dispatch({\n          type: UPDATE_USER,\n          payload: res.data,\n      });\n      // dispatch(setAlert(edit ? 'Event Updated' : 'Event Created', 'success'));\n      dispatch(setAlert('Added source and target languages', 'success'));\n      // if (!edit) {\n      //     history.push('/restdashboard');\n      // }\n      // history.push('/viewmenu');\n  } catch (err) {\n      const errors = err.response.data.errors;\n      if (errors) {\n          errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n      }\n      dispatch({\n          type: UPDATE_USER_ERROR,\n          payload: { msg: err.response.statusText, status: err.response.status },\n      });\n  }\n};"]},"metadata":{},"sourceType":"module"}